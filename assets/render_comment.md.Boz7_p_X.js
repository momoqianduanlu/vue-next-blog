import{_ as i}from"./chunks/comment1.DYqCt6bp.js";import{_ as a,c as n,a0 as e,o as t}from"./chunks/framework.BFeFTQGI.js";const p="/vue-next-blog/assets/comment2.82zZ13_X.png",l="/vue-next-blog/assets/comment3.DoHPBKqt.png",h="/vue-next-blog/assets/render-comment.C2UruWmf.png",F=JSON.parse('{"title":"renderer 渲染器下，Comment 节点的挂载行为","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"render/comment.md","filePath":"render/comment.md"}'),k={name:"render/comment.md"};function o(r,s,d,c,E,m){return t(),n("div",null,s[0]||(s[0]=[e(`<h1 id="renderer-渲染器下-comment-节点的挂载行为" tabindex="-1">renderer 渲染器下，Comment 节点的挂载行为 <a class="header-anchor" href="#renderer-渲染器下-comment-节点的挂载行为" aria-label="Permalink to &quot;renderer 渲染器下，Comment 节点的挂载行为&quot;">​</a></h1><p>完成了 <code>Text</code> 节点的挂载、更新之后，我们来看 <code>Comment</code> 节点的挂载操作，</p><p>是的，只有<strong>挂载</strong>操作，没有<strong>更新</strong>操作，</p><p>这里要注意：<strong><code>vue</code> 不支持动态的 <code>comment</code>，即没有更新操作</strong>，</p><p>其实对于 <code>Comment</code> 而言，它的整体流程和 <code>Text</code> 非常类似。</p><p>我们来看一下，创建测试实例 <code>packages/vue/examples/imooc/runtime/render-comment.html</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const { h, render, Comment } = Vue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const vnode = h(Comment, &#39;hello world&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 挂载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  render(vnode, document.querySelector(&#39;#app&#39;))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="跟踪代码实现" tabindex="-1">跟踪代码实现 <a class="header-anchor" href="#跟踪代码实现" aria-label="Permalink to &quot;跟踪代码实现&quot;">​</a></h3><p><img src="`+i+`" alt="comment1"></p><ol><li><p>进入 <code>patch</code> 方法，<code>case Comment</code>，触发 <code>processCommentNode</code> 函数</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processCommentNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessTextOrCommentFn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    n1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    n2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    anchor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      hostInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (n2.el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hostCreateComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((n2.children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        container,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        anchor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // there&#39;s no support for dynamic comments</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      n2.el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n1.el</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>内部的代码非常简单，只触发了两个方法：</p><ol><li><p><code>hostCreateComment</code>：内部的代码在 <code>packages/runtime-dom/src/nodeOps.ts</code> 中的 <code>createComment</code> 方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text),</span></span></code></pre></div><p>创建 <code>Comment</code> 节点</p><p><img src="`+p+'" alt="comment2"></p><p><img src="'+l+'" alt="comment3"></p></li><li><p><code>hostInsert</code> 函数将 <code>n2.el</code> 挂载到 <code>dom</code> 节点上面，</p></li><li><p>至此，<code>Comment</code> 节点渲染成功。</p></li></ol></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>对于 <code>Comment</code> 而言，只存在 <strong>挂载</strong> 操作，整体的处理非常简单：</p><ol><li>通过 <code>doc.createComment</code> 创建 <code>Comment</code> 节点</li><li>通过 <code>hostInsert</code> 完成挂载</li></ol><p><img src="'+h+'" alt="render-comment"></p>',14)]))}const C=a(k,[["render",o]]);export{F as __pageData,C as default};

import{_ as s,c as a,a0 as i,o as t}from"./chunks/framework.BFeFTQGI.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"ref/report.md","filePath":"ref/report.md"}'),p={name:"ref/report.md"};function n(l,e,r,o,d,c){return t(),a("div",null,e[0]||(e[0]=[i('<h3 id="为什么ref使用refimpl类去实现-而不是统一使用proxy去代理一个拥有value属性的普通对象呢" tabindex="-1">为什么ref使用<code>RefImpl</code>类去实现，而不是统一使用<code>Proxy</code>去代理一个拥有<code>value</code>属性的普通对象呢？ <a class="header-anchor" href="#为什么ref使用refimpl类去实现-而不是统一使用proxy去代理一个拥有value属性的普通对象呢" aria-label="Permalink to &quot;为什么ref使用`RefImpl`类去实现，而不是统一使用`Proxy`去代理一个拥有`value`属性的普通对象呢？&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value: target,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  baseHandlers</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>如果是上面这样做那么就不需要使用<code>RefImpl</code>类了，全部统一成Proxy去使用响应式了。</p><p>但是上面的做法有个问题，就是使用者可以使用<code>delete proxy.value</code>将<code>proxy</code>对象的<code>value</code>属性给删除了。而使用<code>RefImpl</code>类的方式去实现就不能使用<code>delete</code>的方法去将<code>value</code>属性给删除了。</p>',4)]))}const E=s(p,[["render",n]]);export{k as __pageData,E as default};

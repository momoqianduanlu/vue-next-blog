import{_ as i}from"./chunks/comment1.DYqCt6bp.js";import{_ as a,c as e,a0 as n,o as t}from"./chunks/framework.BFeFTQGI.js";const l="/vue-next-blog/assets/text1.qMMo5hFC.png",p="/vue-next-blog/assets/text2.Dx6CYJ-G.png",h="/vue-next-blog/assets/text3.Ch20XIAr.png",k="/vue-next-blog/assets/text5.DZJ4GV_N.png",d="/vue-next-blog/assets/render-text.DboyEbWn.png",m=JSON.parse('{"title":"renderer 渲染器下，Text 节点的挂载、更新行为","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"render/text.md","filePath":"render/text.md"}'),r={name:"render/text.md"};function o(c,s,E,g,y,F){return t(),e("div",null,s[0]||(s[0]=[n(`<h1 id="renderer-渲染器下-text-节点的挂载、更新行为" tabindex="-1">renderer 渲染器下，Text 节点的挂载、更新行为 <a class="header-anchor" href="#renderer-渲染器下-text-节点的挂载、更新行为" aria-label="Permalink to &quot;renderer 渲染器下，Text 节点的挂载、更新行为&quot;">​</a></h1><p>现在我们来分析下 <code>Text 文本</code> 节点的挂载、更新行为。</p><p>首先创建测试实例 <code>packages/vue/examples/imooc/runtime/render-text.html</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const { h, render, Text } = Vue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const vnode = h(Text, &#39;hello world&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 挂载</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  render(vnode, document.querySelector(&#39;#app&#39;))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 延迟两秒，生成新的 vnode，进行更新操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  setTimeout(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const vnode2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Text, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你好，世界&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode2, document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, 2000);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>前面我们分析过，对于节点的打补丁操作是从 <code>packages/runtime-core/src/renderer.ts</code> 中的 <code>render</code> 函数开始的，所以我们可以直接在这里进行 <code>debugger</code>：</p><h3 id="跟踪代码实现" tabindex="-1">跟踪代码实现 <a class="header-anchor" href="#跟踪代码实现" aria-label="Permalink to &quot;跟踪代码实现&quot;">​</a></h3><p><img src="`+i+'" alt="comment1"></p><ol><li><p>第一次进入 <code>render</code> ，执行挂载操作：</p><ol><li><p>进入 <code>patch</code> 方法，此时的参数为：</p><p><img src="'+l+`" alt="text1"></p></li><li><p>执行 <code>switch</code> 判定，进入 <code>processText</code> 方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processText</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessTextOrCommentFn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">anchor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      hostInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (n2.el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hostCreateText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n2.children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        container,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        anchor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n2.el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n1.el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n2.children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n1.children) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        hostSetText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el, n2.children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><ol><li><p>进入 <code>processText</code>，此时的各参数为：</p><p><img src="`+p+'" alt="text2"></p></li><li><p>因为 <strong><code>n1 === null</code></strong>，所以 执行 <code>hostInsert</code> 和 <code>hostCreateText</code> 方法，即：<strong>挂载</strong> 操作</p><ol><li><p>首先进入 <code>hostCreateText</code> 方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createTextNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text),</span></span></code></pre></div><p>直接通过 <code>doc.createTextNode(text)</code> 生成 <code>Text</code> 节点</p></li><li><p>其次进入 <code>hostInsert</code> 方法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(child, anchor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ol></li><li><p>至此 <strong>挂载</strong> 操作完成</p></li></ol></li></ol></li><li><p>延迟两秒，第二次进入 <code>render</code> 方法，执行 <strong>更新操作</strong></p><ol><li><p>进入 <code>patch</code> 方法，此时的参数为：</p><p><img src="'+h+'" alt="text3"></p><p><code>n1</code> 是第一次的 <code>Text</code>节点，<code>n2</code>是第二次传入的<code>Text</code>节点，</p></li><li><p>执行 <code>switch</code>，触发 <code>processText</code> 方法</p><ol><li><p>进入 <code>processText</code> 方法，此时参数为：</p><p><img src="'+k+'" alt="text5"></p></li><li><p>此时 <code>n1 !== null</code>，所以进入 <code>else</code> 逻辑</p></li><li><p>执行 <code>const el = (n2.el = n1.el!)</code> 获取同样的 <code>el</code>，因为 <code>n2.children !== n1.children</code> 不一样</p></li><li><p>执行 <code>hostSetText(el, n2.children as string)</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node.nodeValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text</span></span></code></pre></div><p>通过修改 <code>nodeValue</code> 完成更新操作，</p></li></ol></li><li><p>至此，<strong>更新</strong>操作完成。</p></li></ol></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>对于节点的 挂载和更新，整体是非常简单的：</p><ol><li>挂载：通过 <code>doc.createTextNode(text)</code> 生成节点，再通过 <code>insertBefore</code> 插入</li><li>更新：通过 <code>node.nodeValue</code> 直接指定即可。</li></ol><p><img src="'+d+'" alt="render-text"></p>',12)]))}const v=a(r,[["render",o]]);export{m as __pageData,v as default};

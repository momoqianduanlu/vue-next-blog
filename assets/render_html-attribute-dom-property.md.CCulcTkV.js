import{_ as i,c as a,a0 as t,o as e}from"./chunks/framework.BFeFTQGI.js";const c=JSON.parse('{"title":"深入属性挂载HTML Attributes 和 DOM Properties","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"render/html-attribute-dom-property.md","filePath":"render/html-attribute-dom-property.md"}'),l={name:"render/html-attribute-dom-property.md"};function n(p,s,h,r,k,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="深入属性挂载html-attributes-和-dom-properties" tabindex="-1">深入属性挂载HTML Attributes 和 DOM Properties <a class="header-anchor" href="#深入属性挂载html-attributes-和-dom-properties" aria-label="Permalink to &quot;深入属性挂载HTML Attributes 和 DOM Properties&quot;">​</a></h1><p>当我们为一个 <code>DOM</code> 设置对应属性的时候，其实分成了两种情况：</p><ol><li><code>HTML Attributes</code></li><li><code>DOM Properties</code></li></ol><p>那么想要搞明白，上一小节中留下的问题的原因，我们就需要明白上面的两种情况指的是什么意思。</p><h3 id="html-attributes" tabindex="-1">HTML Attributes <a class="header-anchor" href="#html-attributes" aria-label="Permalink to &quot;HTML Attributes&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes" target="_blank" rel="noreferrer">HTML Attributes</a>，所代表的的就是 <strong>定义在 <code>HTML</code> 标签上的属性</strong>。比如我们以上一小节渲染的 <code>DOM</code> 为例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">textarea</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test-class&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">textarea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>这里 <code>HTML Attributes</code> 指的就是 <code>class=&quot;test-class&quot;</code> 和 <code>type=&quot;text&quot;</code></p><h3 id="dom-properties" tabindex="-1">DOM Properties <a class="header-anchor" href="#dom-properties" aria-label="Permalink to &quot;DOM Properties&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element#%E8%A7%84%E8%8C%83" target="_blank" rel="noreferrer">DOM Properties</a> ，所代表的就是 <strong>在 DOM 对象上的属性</strong>，比如我们上一小节的 <code>el</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;textarea&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>我们就可以通过 <code>.</code> 的形式获取对应的属性：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.type </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;textarea&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.className </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;test-class&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.value </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;textarea value&#39;</span></span></code></pre></div><h3 id="对比" tabindex="-1">对比 <a class="header-anchor" href="#对比" aria-label="Permalink to &quot;对比&quot;">​</a></h3><p>然后我们对比 <code>HTML Attributes 和 DOM Properties</code> 可以发现双方对于 <strong>同样属性的描述是不同</strong> 的。而这个也是 <code>HTML Attributes 和 DOM Properties</code> 之间的关键。</p><p>那么明确好了这个之后，我们再来看对应方法。根据上一小节的代码，我们可以知道，设置属性，我们一共使用了两个方法：</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/setAttribute" target="_blank" rel="noreferrer">Element.setAttribute()</a>：该方法可以 <strong>设置指定元素上的某个属性值</strong>，</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element#%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">dom.xx</a> ：相当于 <strong>直接修改指定对象的属性</strong></li></ol><p>但是这两个方式却有一个很尴尬的问题，那就是 <strong>属性名不同</strong>。</p><ol><li>针对于 <code>class</code> 获取： <ol><li><code>HTML Attributes</code>：<code>ta.getAttribute(&#39;class&#39;)</code></li><li><code>DOM Properties</code>：<code>ta.className</code></li></ol></li><li>针对于 <code>textarea 的 type</code> 获取： <ol><li><code>HTML Attributes</code>：<code>ta.getAttribute(&#39;type&#39;)</code></li><li><code>DOM Properties</code>：<code>ta.type</code> <strong>无法获取</strong></li></ol></li><li>针对于 <code>taxtarea 的 value</code> 获取： <ol><li><code>HTML Attributes</code>：<code>ta.getAttribute(&#39;value&#39;)</code> <strong>无法获取</strong></li><li><code>DOM Properties</code>：<code>ta.value</code></li></ol></li></ol><p>所以为了解决这种问题，咱们就必须要能够 <strong>针对不同属性，通过不同方式</strong> 进行属性指定。<strong>所以：<code>vue</code> 才会通过一系列的判断进行处理</strong></p><h3 id="针对于-class" tabindex="-1">针对于 class <a class="header-anchor" href="#针对于-class" aria-label="Permalink to &quot;针对于 class&quot;">​</a></h3><p>除了以上内容我们需要知道之外，还有另外一个我们需要了解的知识就是：<strong>既然 <code>class</code> 可以使用 <code>setAttribute</code> 设置，也可以通过 <code>className</code> 设置</strong>，那么这样就存在一个问题：<strong>我们应该通过哪种方式设定 <code>class</code></strong> 呢？</p><p>对于 <code>vue</code> 的代码而言，在 <code>packages/runtime-dom/src/modules/class.ts</code> 中的 <code>patchClass</code> 中：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isSVG) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  el.className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>根据以上代码可知：<strong>只要 dom 不是 <code>svg</code>，则通过 <code>className</code> 设置 <code>class</code></strong>。那么为什么要这么做呢？</p><p>我们创建以下测试案例，对两者之间的性能进行一下对比：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const divEle1 = document.querySelector(&#39;#app&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const divEle2 = document.querySelector(&#39;#app2&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.time(&#39;classname&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  for (let i = 0; i &lt; 10000; i++) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    divEle1.className </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-2&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.timeEnd(&#39;classname&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.time(&#39;attr&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  for (let i = 0; i &lt; 10000; i++) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    divEle2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;class&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.timeEnd(&#39;attr&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>最后打印的结果为：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">classname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.7470703125</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.389892578125</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ms</span></span></code></pre></div><p>由打印结果可知 <code>className</code> 的性能 <strong>大于</strong> <code>setAttribute</code> 的性能</p><p>所以：<strong>针对于 <code>class</code></strong>， 我们应该使用 <code>className</code> 来进行指定。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>对于 <code>vue</code> 对不同属性的挂载我们做了详细的分析，经过分析以后，我们知道了<code>vue</code>为什么要这么做以及 <code>HTML Attributes 和 DOM Properties</code> 的不同点，想要成功的进行各种属性的设置，那么需要 <strong>针对不同属性，通过不同方式</strong> 完成。</p><p>对于源码中的 <code>className</code>的设置，我们也知道了为什么在不同的情况下<code>el.className</code> 和 <code>el.setAttribute(&#39;class&#39;, &#39;&#39;)</code>要区分使用，因为 <code>el.className</code> 的性能更高，所以我们应该尽量使用 <code>className</code> 进行指定。</p>`,34)]))}const E=i(l,[["render",n]]);export{c as __pageData,E as default};

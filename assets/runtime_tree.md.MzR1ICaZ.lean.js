import{_ as i,c as a,a0 as e,o as n}from"./chunks/framework.BFeFTQGI.js";const t="/vue-next-blog/assets/634f6e4f09e54d0121261262.DU0XyNFV.png",E=JSON.parse('{"title":"虚拟 DOM 树","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"runtime/tree.md","filePath":"runtime/tree.md"}'),l={name:"runtime/tree.md"};function p(h,s,d,k,o,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="虚拟-dom-树" tabindex="-1">虚拟 DOM 树 <a class="header-anchor" href="#虚拟-dom-树" aria-label="Permalink to &quot;虚拟 DOM 树&quot;">​</a></h1><ol><li><code>HTML DOM</code> 节点树</li><li>虚拟 <code>DOM</code> 树</li></ol><p>我们来看下面这段 <code>HTML</code>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello h1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- TODO: comment --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hello div</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>当浏览器看到这一段 <code>html</code> 时，它会生成一个对应的 <a href="https://zh.javascript.info/dom-nodes" target="_blank" rel="noreferrer">DOM 树</a> 来进行表示：</p><p><img src="`+t+`" alt="634f6e4f09e54d0121261262"></p><p>以上我们通过 <strong><a href="https://www.runoob.com/htmldom/htmldom-nodes.html" target="_blank" rel="noreferrer">节点（<code>Node</code>）</a></strong> 来描述了以上所有的元素，在 <code>HTML</code> 中所有的元素都是一个节点，注释、文本都属于节点的一部分。</p><p>这样的通过节点构成的一个树形结构，我们就把它叫做 <strong>HTML DOM 节点树</strong></p><h3 id="什么是-虚拟-dom-树呢" tabindex="-1">什么是 虚拟 <code>DOM</code> 树呢？ <a class="header-anchor" href="#什么是-虚拟-dom-树呢" aria-label="Permalink to &quot;什么是 虚拟 \`DOM\` 树呢？&quot;">​</a></h3><blockquote><h6 id="来自-vue-官方文档" tabindex="-1"><a href="https://cn.vuejs.org/guide/extras/rendering-mechanism.html#virtual-dom" target="_blank" rel="noreferrer"># 来自 vue 官方文档</a> <a class="header-anchor" href="#来自-vue-官方文档" aria-label="Permalink to &quot;[# 来自 vue 官方文档](https://cn.vuejs.org/guide/extras/rendering-mechanism.html#virtual-dom)&quot;">​</a></h6><p>虚拟 DOM (Virtual DOM，简称 VDOM) 是一种编程概念，意为将目标所需的 UI 通过数据结构“虚拟”地表示出来，保存在内存中，然后将真实的 DOM 与之保持同步。这个概念是由 <a href="https://reactjs.org/" target="_blank" rel="noreferrer">React</a> 率先开拓，随后在许多不同的框架中都有不同的实现，当然也包括 Vue。</p></blockquote><p>虚拟 <code>DOM</code> 是一种理念，比如，我期望通过一个 <code>JavaScript 对象</code> 来描述一个 <code>div 节点</code>，它的子节点是一个文本<code>节点 text</code>，则可以这么写：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;div&gt;text&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过 虚拟 dom 表示</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vnode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	children: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面这个对象中，我们通过 <code>type</code> 来表示当前为一个 <code>div 节点</code>，通过 <code>children</code> 来表示它的子节点，通过 <code>text</code> 表示子节点是一个 文本节点，内容是 <code>text</code>。</p><p>这里所涉及到的 <code>vnode</code>，是一个 <strong>纯 <code>JavaScript</code> 对象</strong>，我们通常使用它来表示 <strong>一个虚拟节点（或虚拟节点树）</strong>。它里面的属性名不是固定的，比如我可以使用 <code>type</code> 表示这是一个 <code>div</code>，也可以使用 <code>tag</code> 进行表示，都是可以的。</p><p>在 <code>vue</code> 的源码中，通过使用它来表示所需要创建元素的所有信息，比如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello h1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- TODO: comment --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hello div</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>该例子如果使用 <code>vnode</code> 进行表示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vnode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      children: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello h1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: Comment,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      children: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TODO: comment&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;hello div&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在运行时 <code>runtime</code> ，渲染器 <code>renderer</code> 会遍历整个虚拟 <code>DOM</code> 树，并据此构建真实的 DOM 树，这个过程我们可以把它叫做 <strong>挂载 <code>mount</code></strong>。</p><p>当这个 <code>VNode</code> 对象发生变化时，那么我们会对比 <strong>旧的 <code>VNode</code></strong> 和 <strong>新的 <code>VNode</code></strong> 之间的区别，找出它们之间的区别，并应用这其中的变化到真实的 DOM 上。这个过程被称为<strong>更新 patch</strong>。</p>`,20)]))}const g=i(l,[["render",p]]);export{E as __pageData,g as default};
